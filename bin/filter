#!/bin/bash

show_help() {
  echo ""
  echo "USAGE: $(basename $0) [-h] [-s sep] -c condition [-n]"
  echo ""
  echo "  s sep       : the field separator used in the input data"
  echo "  c condition : the condition to use for filtering. This should take the form"
  echo "                'number-column==1', 'string-column==\"foo\"' or 'column~/regex/'"
  echo "                The supported operators are ~, ==, <, >, <= and >="
  echo "  n           : remove the matching rows rather than keeping them"
  echo "  h           : print this help text"
  echo ""
}

SEPARATOR=${CSV_UTILS_SEPARATOR:-,}

NEGATE=""
CONDITION=""
while getopts "hc:ns:" opt
do
  case "$opt" in
    h)
      show_help
      exit 0
      ;;
    s) SEPARATOR="$OPTARG"
      ;;
    c) CONDITION="$OPTARG"
      ;;
    n) NEGATE="!"
      ;;
  esac
done
shift $((OPTIND-1))

if [ "$CONDITION" == "" ]
then
  >&2 echo "ERROR: Missing mandatory argument -c"
  >&2 show_help
  exit 1
fi

# figure out which version of sed we're using
START_WORD='\b'
END_WORD='\b'
SED="sed"
case "`uname`" in
  Darwin*)
    START_WORD='[[:<:]]'
    END_WORD='[[:>:]]'
    SED="/usr/bin/sed"
    ;;
esac

read HEADERS
OLD_IFS=$IFS
IFS=$SEPARATOR
i=1
SED_COMMAND="$SED "
for HEADER in $HEADERS
do
  SED_COMMAND="$SED_COMMAND -e 's/${START_WORD}${HEADER}${END_WORD}/\$$i/g'"
  # replace all instances of $HEADER in $CONDITION with \$$i
  i=$((i+1))
done
IFS=$OLD_IFS
CONDITION=`bash -c "echo \"${CONDITION}\" | $SED_COMMAND"`

AWK_SCRIPT_FILE=`mktemp`
echo "{
  if ($NEGATE ($CONDITION)) {
    print \$0
  }
}" > $AWK_SCRIPT_FILE

AWK_INCLUDE_ARGS=""
for AWK_INCLUDE_FILE in $(echo $AWK_INCLUDE_FILES | sed -e 's/:/ /g')
do
  AWK_INCLUDE_ARGS="$AWK_INCLUDE_ARGS-f $AWK_INCLUDE_FILE "
done

echo $HEADERS
awk -F $SEPARATOR  $AWK_INCLUDE_ARGS -f $AWK_SCRIPT_FILE -
rm $AWK_SCRIPT_FILE
